%% Import data from text file.
% Script for importing data from the following text file:
%
%    G:\My Drive\ARRC\NF2FF\nf2ff\KevinCode\InProgress\sampleH.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/02/11 10:51:29
% clc
% close all
% clear all




%% Initialize variables.
% filename = '2019-01-22_21_59_46_00_H_UniformUniform.csv';
function [data] = ImportRwave(filename)
fileID = fopen(filename,'r');
all = ((textscan(fileID,'%s%s%s%s%s%s%s%s%s%[^\n\r]','Delimiter',',')));
fclose(fileID);
firstcol = string(all{:,1});
start = firstcol(1);
A0length = 64;

%Detecting the length for each chunck of frequencies
for i = 2:length(firstcol)
    if firstcol(i) == start
        break
    end
end

fileID = fopen(filename,'r');
headerlines = 7;
delimiter = ',';
dataArray = 0;
chunk = i-headerlines-1;
numCols = 12;


first = 1;
while ~feof(fileID) 
%     format = ',%d %s %s  %f  %f %f %f %f %s %s';
    formatSpec = char("%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s"+...
        "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%"+...
        "s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]");
    header = textscan(fileID,formatSpec,headerlines,'Delimiter',',','Headerlines',0);
    flathead = [header{:}];
    if feof(fileID)
        break
    end
    
    ypos = string(flathead(4,1));
    xpos = string(flathead(4,2));
    rpos = string(flathead(4,3));
    x(1:chunk,1) = xpos;y(1:chunk,1) = ypos; r(1:chunk,1) = rpos;
    
    A0vals = zeros(chunk,A0length);
    for i = 1:A0length
        A0vals(1:chunk,i) = string(flathead(6,i));
    end


    formatSpec = '%s%s%s%s%s%s%s%s%s%[^\n\r]';
    tempArray = textscan(fileID, formatSpec,chunk, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,0, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    tempArray{1,10} = string(x); tempArray{1,11} = string(y); tempArray{1,12} = string(r);
    

    
    if first == 1
        dataArray = tempArray;
        first = 0;
    else
        dataArray = cat(1,dataArray,tempArray);
    end
    clear tempArray
end
myflatcellarray=[dataArray{:}];
sample = (reshape(myflatcellarray,[],numCols));
% clear dataArray;


%% Close the text file.
fclose(fileID);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%KEVIN'S MUCH QUICKER SOLUTION. IF THE DATA IS NOT BEING 
%REPRESENTED CORRECTLY, COMMENT OUT AND USE THE SECTION
%BELOW INSTEAD.
doubleCols = 1:12;
for col = 1:numCols
    for row = 1:length(sample)
        if sum(col == doubleCols)
            raw{row,col} = double(sample(row,col));
        else
            raw{row,col} = sample(row,col);
        end
    end    
end



%% Create output variable
data = table;
data.FreqHz = cell2mat(raw(:, 1));
data.S11DB = cell2mat(raw(:, 2));
data.S11DEG = cell2mat(raw(:, 3));
data.S12DB = cell2mat(raw(:, 4));
data.S12DEG = cell2mat(raw(:, 5));
data.S21DB = cell2mat(raw(:, 6));
data.S21DEG = cell2mat(raw(:, 7));
data.S22DB = cell2mat(raw(:, 8));
data.S22DEG = cell2mat(raw(:, 9));
data.x = cell2mat(raw(:, 10));
data.y = cell2mat(raw(:, 11));
data.r = cell2mat(raw(:, 12));

save('data.mat','data');
end

%% Clear temporary variables
% clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp;