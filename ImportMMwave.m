%% Import data from text file.
% Script for importing data from the following text file:
%
%    G:\My Drive\ARRC\NF2FF\nf2ff\KevinCode\InProgress\sampleH.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/02/11 10:51:29

% clc
% close all
% clear all



%% Initialize variables.
% filename = '2019-01-22_21_59_46_00_H_UniformUniform.csv';
function [data] = ImportMMwave(filename)
delimiter = ',';
startRow = 4;
dataArray = 0;
chunk = 101;
endChunk = 255;
numCols = 12;
fileID = fopen(filename,'r');

for i = 0:endChunk    
    currentLine = i*(chunk+3)+1;
    format = ',%d %s %s  %f  %f %f %f %f %s %s';
    formatSpec = '%s%s%s%s%s%s%s%s%s%[^\n\r]';
    header = textscan(fileID,formatSpec,1,'Delimiter',',','HeaderLines',1);
%     pol = char(string(header(1,3)));

    positions = double(string(header(1,5:7)));
    xpos = positions(1);ypos = positions(2);zpos = positions(3);
    x(1:chunk,1) = xpos;y(1:chunk,1) = ypos; z(1:chunk,1) = zpos;
    
    formatSpec = '%s%s%s%s%s%s%s%s%s%[^\n\r]';
    tempArray = textscan(fileID, formatSpec,chunk, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,2, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    tempArray{1,10} = string(x); tempArray{1,11} = string(y); tempArray{1,12} = string(z);
    trash = textscan(fileID,formatSpec,1,'Delimiter',',','HeaderLines',1);
    if i == 0
        dataArray = tempArray;
    else
        dataArray = cat(1,dataArray,tempArray);
    end
    clear tempArray
end

myflatcellarray=[dataArray{:}];
sample = (reshape(myflatcellarray,[],numCols));
clear dataArray;


%% Close the text file.
fclose(fileID);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%KEVIN'S MUCH QUICKER SOLUTION. IF THE DATA IS NOT BEING 
%REPRESENTED CORRECTLY, COMMENT OUT AND USE THE SECTION
%BELOW INSTEAD.
doubleCols = 1:12;
for col = 1:numCols
    for row = 1:length(sample)
        if sum(col == doubleCols)
            raw{row,col} = double(sample(row,col));
        else
            raw{row,col} = sample(row,col);
        end
    end    
end

%% Convert the contents of columns containing numeric text to numbers.
% THIS SECTION BASICALLY MAKES SURE THAT THE TEXT IS REPRESENTED PROPERLY 
% IT ADDS QUITE A BIT OF TIME TO THE CODE. I MADE A MUCH QUICKER SOLUTION
% for col = 1:(numCols)
%     dataArray(1,col) = {sample(:,col)};  
% end
% %Replace non-numeric text with NaN.
% raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
% for col=1:length(dataArray)-1
%     raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
% end
% numericData = NaN(size(dataArray{1},1),size(dataArray,2));
% 
% for col=[1,2,3,4,5,6,7,8,9,10,11,12]
%     % Converts text in the input cell array to numbers. Replaced non-numeric
%     % text with NaN.
%     rawData = dataArray{col};
%     for row=1:size(rawData, 1)
%         % Create a regular expression to detect and remove non-numeric prefixes and
%         % suffixes.
%         regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
%         try
%             result = regexp(rawData(row), regexstr, 'names');
%             numbers = result.numbers;
%             
%             % Detected commas in non-thousand locations.
%             invalidThousandsSeparator = false;
%             if numbers.contains(',')
%                 thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
%                 if isempty(regexp(numbers, thousandsRegExp, 'once'))
%                     numbers = NaN;
%                     invalidThousandsSeparator = true;
%                 end
%             end
%             % Convert numeric text to numbers.
%             if ~invalidThousandsSeparator
%                 numbers = textscan(char(strrep(numbers, ',', '')), '%f');
%                 numericData(row, col) = numbers{1};
%                 raw{row, col} = numbers{1};
%             end
%         catch
%             raw{row, col} = rawData{row};
%         end
%     end
% end

%% Create output variable
data = table;
data.FreqHz = cell2mat(raw(:, 1));
data.S11DB = cell2mat(raw(:, 2));
data.S11DEG = cell2mat(raw(:, 3));
data.S12DB = cell2mat(raw(:, 4));
data.S12DEG = cell2mat(raw(:, 5));
data.S21DB = cell2mat(raw(:, 6));
data.S21DEG = cell2mat(raw(:, 7));
data.S22DB = cell2mat(raw(:, 8));
data.S22DEG = cell2mat(raw(:, 9));
data.x = cell2mat(raw(:, 10));
data.y = cell2mat(raw(:, 11));
data.z = cell2mat(raw(:, 12));

% save('data.mat','data');

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp;
end
